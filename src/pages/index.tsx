import { getSession, useSession } from 'next-auth/react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { useRecoilState } from 'recoil';
import { trackIdState } from '../atoms/track';
import { Spotify } from '../lib/spotify';
import msConverter from '../utils/msConverter';

import { Grid, Item, List, Title, Track } from '@components/index';

interface Artist {
  name: string;
  id: string;
}

interface Album {
  name: string;
  images: { url: string }[];
}

interface Track {
  id: string;
  name: string;
  duration_ms: number;
  explicit: boolean;
  popularity: number;
  album: Album;
  artists: Artist[];
}

interface HomeProps {}

const Home: React.FC<HomeProps> = () => {
  const [columns, setColumns] = useState<number>(7);
  const [recentlyPlayedTracks, setRecentPlayedTracks] = useState<Track[]>([]);
  const [myTopTracks, setMyTopTracks] = useState<Track[]>([]);
  const [newReleases, setNewReleases] = useState<Album[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const { data: session, status } = useSession();
  const [trackId, setTrackId] = useRecoilState(trackIdState);
  const router = useRouter();

  // GET MyRecently Played Tracks
  const getMyRecentlyPlayedTracks = async () => {
    try {
      const data = await Spotify.getMyRecentlyPlayedTracks();

      const uniqueArray = [
        ...new Map(
          data.body.items
            .sort((a, b) => new Date(b.played_at) - new Date(a.played_at))
            .map((item) => [item.track.id, item.track])
        ).values(),
      ].slice(0, 14);

      setRecentPlayedTracks(uniqueArray);
    } catch (err) {
      console.log(err);
    }
  };

  const getMyTopTracks = async () => {
    try {
      const data = await Spotify.getMyTopTracks({ limit: 5 });
      const myTopTracks = data.body.items.map((track) => track);

      setMyTopTracks(myTopTracks);
    } catch (err) {
      console.log(err);
    }
  };

  const getNewReleases = async () => {
    try {
      const data = await Spotify.getNewReleases({ limit: 5 });
      const newReleases = data.body.albums.items;

      setNewReleases(newReleases);
    } catch (err) {
      console.log(err);
    }
  };

  // Check if tracks are in the signed in user's Your Music library
  const isLikedTrack = async () => {};

  useEffect(() => {
    // SET TOKEN
    if (session?.accessToken) {
      localStorage.setItem('token', session.accessToken);
    }

    // GET MyRecentlyPlayedTracks
    getMyRecentlyPlayedTracks();

    // GET Top Tracks
    getMyTopTracks();

    // GET New Releases
    getNewReleases();
  }, []);

  // check how recentlyPlayedTracks cols
  useEffect(() => {
    if (recentlyPlayedTracks.length <= 8) {
      setColumns(4);
    } else if (
      recentlyPlayedTracks.length > 8 &&
      recentlyPlayedTracks.length <= 10
    ) {
      setColumns(5);
    } else if (recentlyPlayedTracks.length > 10) {
      setColumns(7);
    }
  }, [recentlyPlayedTracks]);

  if (!session?.accessToken) {
    return <>login</>;
  }

  const createTooltipStr = ({
    name,
    popularity,
    explicit,
    artists,
    duration_ms,
  }: any) => {
    return `Name: ${name}\nArtist: ${artists[0].name}\nExplicit: ${
      explicit ? 'Yes' : 'No'
    }\nPopularity: ${popularity}\nDuration: ${msConverter(duration_ms)}
    `;
  };

  return (
    <>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="full">
        <div className="recently-add">
          <div className="container">
            <Title
              border={false}
              options={{
                caption: 'Showed As',
                description: 'This Week',
              }}
            >
              Recently Add
            </Title>
          </div>
          {/* recently played tracks when loading */}
          {isLoading ? (
            <Grid cols={4} type="carousel">
              {Array(8)
                .fill('_')
                .map((_, index) => (
                  <Item key={index} title="hidden_text" loading={true} />
                ))}
            </Grid>
          ) : (
            <Grid cols={columns} type="carousel">
              {/* draw recently played tracks loading */}
              {recentlyPlayedTracks.map((track: TrackProps) => {
                const { id, name, artists, album } = track;
                return (
                  <Item
                    onClick={() => setTrackId(id)}
                    key={id}
                    id={id}
                    title={name}
                    tooltip={createTooltipStr(track)}
                    subtitle={artists[0]?.name}
                    artistId={artists[0]?.id}
                    image={album?.images[2]?.url}
                    font="poppins"
                    fontSize={14}
                    width={300}
                  />
                );
              })}
            </Grid>
          )}
        </div>
        {/* track list / topTracks & Newest */}
        <Grid cols={2}>
          <section
            className="container"
            style={{
              fontFamily: 'Poppins',
              borderRight: '1px solid var(--border)',
            }}
          >
            <Title
              border={false}
              options={{
                caption: 'Show All',
                href: '/top/tracks',
              }}
            >
              My Top Trakcs
            </Title>
            <div
              className="tracks"
              style={{
                display: 'flex',
                flexDirection: 'column',
                gap: '5px',
                padding: '0 20px 50px',
              }}
            >
              <List
                data={['Name', 'Artist', 'Album']}
                justifyContent="space-around"
                text="#797979"
                fontSize="14px"
              />
              {myTopTracks.map(({ id, name, album, artists }) => {
                return (
                  <Track
                    onClick={() => setTrackId(id)}
                    key={id}
                    id={id}
                    artistId={artists[0].id}
                    name={name}
                    album_name={album.name}
                    artist_name={artists[0].name}
                    height={40}
                    fontSize={13}
                  />
                );
              })}
            </div>
          </section>
          <section
            className="container"
            style={{
              fontFamily: 'Poppins',
            }}
          >
            <Title
              border={false}
              options={{ caption: 'SEE ALL', href: '/browser' }}
            >
              New Releases
            </Title>
            <div
              className="tracks"
              style={{
                display: 'flex',
                flexDirection: 'column',
                gap: '5px',
                padding: '0 20px',
              }}
            >
              <List
                data={['Name', 'Artist', 'Album']}
                justifyContent="space-around"
                text="#797979"
                fontSize="14px"
              />
              {newReleases.map(({ id, name, artists, uri }) => {
                return (
                  <Track
                    onClick={() => setTrackId(id)}
                    key={id}
                    id={id}
                    name={name}
                    artistId={artists[0].id}
                    // album_name={name}
                    artist_name={artists[0].name}
                    uri={uri}
                    height={40}
                    fontSize={13}
                  />
                );
              })}
            </div>
          </section>
        </Grid>
      </main>
    </>
  );
};

export default Home;

export async function getServerSideProps(context) {
  const session = await getSession(context);
  return {
    props: {
      session,
    },
  };
}
